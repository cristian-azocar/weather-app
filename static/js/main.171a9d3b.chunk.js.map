{"version":3,"sources":["components/Map/styles.ts","components/Map/Map.tsx","components/WeatherDialog/styles.ts","components/WeatherDialog/WeatherDialog.tsx","assets/images/welcome-image.png","components/WelcomeDialog/styles.ts","components/WelcomeDialog/WelcomeDialog.tsx","services/WeatherService/WeatherService.ts","contexts/WeatherContext/WeatherContext.tsx","App.tsx","utils/localStorage-utils/localStorage-utils.ts","hooks/useMergeState/useMergeState.tsx","index.tsx"],"names":["makeStyles","mapContainer","width","height","defaultProps","center","onClick","undefined","MapConsumer","props","useMapEvents","click","e","latlng","lat","lng","latitude","longitude","Map","classes","useStyles","MapContainer","id","zoom","className","TileLayer","attribution","url","theme","dialogTitle","padding","spacing","dialogPaper","minHeight","dialogContent","display","alignItems","justifyContent","closeButton","position","right","top","grid","textAlign","errorIcon","fontSize","WeatherDialog","open","loading","weather","error","onClose","onRetry","Dialog","maxWidth","fullWidth","paper","DialogTitle","disableTypography","Typography","variant","IconButton","aria-label","DialogContent","CircularProgress","size","role","aria-busy","Grid","container","direction","item","color","Button","current","temp","alt","src","icon","description","breakpoints","only","margin","maxHeight","borderRadius","dialogActions","gridContainer","flexDirection","gridItem","flexGrow","WelcomeDialog","Box","welcomeImage","align","fontWeight","marginBottom","marginTop","symbol","label","Link","href","target","rel","underline","DialogActions","baseUrl","this","a","axios","get","data","process","WeatherContext","createContext","WeatherContextProvider","children","useState","fetchWeather","state","weatherService","Provider","value","initialWeatherDialogState","initialWelcomeDialogState","key","localStorage","getItem","JSON","parse","localStorageUtils","App","initialState","setState","useCallback","previousState","useMergeState","weatherDialog","setWeatherDialog","welcomeDialog","setWelcomeDialog","lastCoordinatesRef","useRef","useContext","fetchAndDisplayWeather","coordinates","data-testid","setItem","stringify","Error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.171a9d3b.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  mapContainer: {\n    width: '100%',\n    height: '100vh',\n  },\n}));\n","import { LeafletMouseEvent } from 'leaflet';\nimport { MapContainer, TileLayer, useMapEvents } from 'react-leaflet';\nimport useStyles from './styles';\n\ntype MapProps = {\n  center?: CoordinatesTuple;\n  onClick?: (coordinates: Coordinates) => void;\n};\n\nexport type Coordinates = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type CoordinatesTuple = [number, number];\n\nconst defaultProps: MapProps = {\n  center: [-33.448, -70.669],\n  onClick: undefined,\n};\n\nfunction MapConsumer(props: MapProps): null {\n  const { onClick } = props;\n\n  useMapEvents({\n    click: (e: LeafletMouseEvent): void => {\n      const { lat, lng } = e.latlng;\n      const coordinates: Coordinates = { latitude: lat, longitude: lng };\n      onClick?.(coordinates);\n    },\n  });\n\n  return null;\n}\n\nfunction Map(props: MapProps): JSX.Element {\n  const { center, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <MapContainer\n      id=\"map\"\n      center={center}\n      zoom={4}\n      className={classes.mapContainer}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <MapConsumer onClick={onClick} />\n    </MapContainer>\n  );\n}\n\nMap.defaultProps = defaultProps;\n\nexport default Map;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  dialogTitle: {\n    padding: theme.spacing(2),\n  },\n  dialogPaper: {\n    minHeight: 290,\n  },\n  dialogContent: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n  },\n  grid: {\n    textAlign: 'center',\n  },\n  errorIcon: {\n    fontSize: 80,\n  },\n}));\n","import Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorOutline from '@material-ui/icons/ErrorOutline';\nimport { Button } from '@material-ui/core';\nimport { IWeather } from '../../types/interfaces';\nimport useStyles from './styles';\n\ntype WeatherDialogProps = {\n  open: boolean;\n  loading?: boolean;\n  weather?: IWeather;\n  error?: Error;\n  onClose?: () => void;\n  onRetry?: () => void;\n};\n\nfunction WeatherDialog(props: WeatherDialogProps): JSX.Element {\n  const { open, loading, weather, error, onClose, onRetry } = props;\n  const classes = useStyles();\n\n  function renderContent(): JSX.Element {\n    if (loading) {\n      return <CircularProgress size={80} role=\"progressbar\" aria-busy=\"true\" />;\n    }\n\n    if (error) {\n      return (\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n          <Grid item>\n            <ErrorOutline color=\"error\" className={classes.errorIcon} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" role=\"alert\">\n              Oops! Something went wrong\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={onRetry}>\n              Retry\n            </Button>\n          </Grid>\n        </Grid>\n      );\n    }\n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        <Grid item>\n          <Typography variant=\"h4\">{weather?.current.temp}&deg;</Typography>\n        </Grid>\n        <Grid item>\n          <img\n            alt=\"icon\"\n            src={`https://openweathermap.org/img/wn/${weather?.current.weather[0].icon}@2x.png`}\n          />\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h5\">\n            {weather?.current.weather[0].description}\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"xs\"\n      fullWidth\n      classes={{ paper: classes.dialogPaper }}\n    >\n      <DialogTitle disableTypography className={classes.dialogTitle}>\n        <Typography variant=\"h6\">Current Weather</Typography>\n        <IconButton\n          className={classes.closeButton}\n          onClick={onClose}\n          aria-label=\"close\"\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        {renderContent()}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nWeatherDialog.defaultProps = {\n  loading: false,\n  weather: undefined,\n  error: undefined,\n  onClose: undefined,\n  onRetry: undefined,\n};\n\nexport default WeatherDialog;\n","export default __webpack_public_path__ + \"static/media/welcome-image.3f91deb7.png\";","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  dialogPaper: {\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      height: '100%',\n      margin: '0px',\n      maxWidth: '100%',\n      maxHeight: 'none',\n      borderRadius: '0px',\n    },\n  },\n  dialogActions: {\n    justifyContent: 'center',\n  },\n  gridContainer: {\n    height: '100%',\n    alignItems: 'center',\n    flexDirection: 'column',\n    [theme.breakpoints.only('xs')]: {\n      flexDirection: 'row',\n    },\n  },\n  gridItem: {\n    flexGrow: 1,\n  },\n}));\n","import Emoji from 'a11y-react-emoji';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport welcomeImage from '../../assets/images/welcome-image.png';\nimport useStyles from './styles';\n\ntype WelcomeDialogProps = {\n  open: boolean;\n  onClose?: () => void;\n};\n\nfunction WelcomeDialog(props: WelcomeDialogProps): JSX.Element {\n  const { open, onClose } = props;\n  const classes = useStyles();\n\n  return (\n    <Dialog open={open} classes={{ paper: classes.dialogPaper }}>\n      <DialogContent>\n        <Grid container className={classes.gridContainer}>\n          <Grid item className={classes.gridItem}>\n            <Box textAlign=\"center\">\n              <img src={welcomeImage} alt=\"welcome\" />\n            </Box>\n          </Grid>\n          <Grid item className={classes.gridItem}>\n            <Typography variant=\"h5\" align=\"center\">\n              <Box fontWeight=\"bold\" marginBottom=\"20px\" marginTop=\"20px\">\n                Welcome to Weather App! <Emoji symbol=\"👋\" label=\"wave-hand\" />\n              </Box>\n            </Typography>\n          </Grid>\n          <Grid item className={classes.gridItem}>\n            <Typography align=\"center\">\n              Hello there! My name is{' '}\n              <Link\n                href=\"https://github.com/cristian-azocar\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                underline=\"always\"\n              >\n                Cristian Azócar\n              </Link>{' '}\n              and I made this simple web application for fun. Just select a\n              place on the map and see the current temperature. If you want to\n              know more, visit the{' '}\n              <Link\n                href=\"https://github.com/cristian-azocar/weather-app\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                underline=\"always\"\n              >\n                repository.\n              </Link>\n            </Typography>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions className={classes.dialogActions}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\n          OK, got it!\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nWelcomeDialog.defaultProps = {\n  onClose: undefined,\n};\n\nexport default WelcomeDialog;\n","import axios from 'axios';\nimport { IWeather } from '../../types/interfaces';\n\nexport class WeatherService {\n  baseUrl: string;\n\n  constructor(baseUrl: string | undefined = '') {\n    this.baseUrl = baseUrl;\n  }\n\n  async fetchWeather(latitude: number, longitude: number): Promise<IWeather> {\n    const url = `${this.baseUrl}/api/weather?latitude=${latitude}&longitude=${longitude}`;\n    const { data } = await axios.get<IWeather>(url);\n\n    return data;\n  }\n}\n\nexport default new WeatherService(process.env.REACT_APP_API_BASE_URL);\n","import { createContext, PropsWithChildren, useContext, useState } from 'react';\nimport { IWeather } from '../../types/interfaces';\nimport weatherService from '../../services/WeatherService';\n\ntype WeatherContextType = {\n  fetchWeather: (latitude: number, longitude: number) => Promise<IWeather>;\n};\n\nconst WeatherContext = createContext({} as WeatherContextType);\n\nexport function WeatherContextProvider(\n  props: PropsWithChildren<unknown>\n): JSX.Element {\n  const { children } = props;\n  const [state] = useState<WeatherContextType>({ fetchWeather });\n\n  async function fetchWeather(\n    latitude: number,\n    longitude: number\n  ): Promise<IWeather> {\n    const weather: IWeather = await weatherService.fetchWeather(\n      latitude,\n      longitude\n    );\n\n    return weather;\n  }\n\n  return (\n    <WeatherContext.Provider value={state}>{children}</WeatherContext.Provider>\n  );\n}\n\nexport function useWeather(): WeatherContextType {\n  return useContext(WeatherContext);\n}\n\nexport default WeatherContext;\n","import { useRef, useState } from 'react';\nimport Map, { Coordinates } from './components/Map';\nimport WeatherDialog from './components/WeatherDialog';\nimport WelcomeDialog from './components/WelcomeDialog';\nimport { useWeather } from './contexts/WeatherContext';\nimport useMergeState from './hooks/useMergeState';\nimport { IWeather } from './types/interfaces';\nimport * as localStorageUtils from './utils/localStorage-utils';\n\ntype WeatherDialogState = {\n  open: boolean;\n  loading?: boolean;\n  weather?: IWeather;\n  error?: Error;\n};\n\nconst initialWeatherDialogState: WeatherDialogState = {\n  open: false,\n  loading: false,\n  weather: undefined,\n  error: undefined,\n};\n\nconst initialWelcomeDialogState = {\n  open: !localStorageUtils.getItem('welcomeDialogSeen'),\n};\n\nexport default function App(): JSX.Element {\n  const [weatherDialog, setWeatherDialog] = useMergeState(\n    initialWeatherDialogState\n  );\n  const [welcomeDialog, setWelcomeDialog] = useState(initialWelcomeDialogState);\n  const lastCoordinatesRef = useRef<Coordinates>();\n  const { fetchWeather } = useWeather();\n\n  function handleMapClick(coordinates: Coordinates): void {\n    lastCoordinatesRef.current = coordinates;\n    fetchAndDisplayWeather(coordinates);\n  }\n\n  function retryWeatherFetch(): void {\n    if (!lastCoordinatesRef.current) {\n      throw new Error('No coordinates have been selected yet');\n    }\n\n    fetchAndDisplayWeather(lastCoordinatesRef.current);\n  }\n\n  function closeWeatherDialog(): void {\n    setWeatherDialog({ open: false });\n  }\n\n  function closeWelcomeDialog(): void {\n    localStorageUtils.setItem('welcomeDialogSeen', true);\n    setWelcomeDialog({ open: false });\n  }\n\n  async function fetchAndDisplayWeather(\n    coordinates: Coordinates\n  ): Promise<void> {\n    setWeatherDialog({ open: true, loading: true });\n\n    try {\n      const { latitude, longitude } = coordinates;\n      const weather: IWeather = await fetchWeather(latitude, longitude);\n      setWeatherDialog({ loading: false, weather });\n    } catch (error) {\n      setWeatherDialog({ loading: false, error });\n    }\n  }\n\n  return (\n    <div id=\"app\" data-testid=\"app\">\n      <WelcomeDialog open={welcomeDialog.open} onClose={closeWelcomeDialog} />\n      <Map onClick={handleMapClick} />\n      <WeatherDialog\n        open={weatherDialog.open}\n        loading={weatherDialog.loading}\n        weather={weatherDialog.weather}\n        error={weatherDialog.error}\n        onClose={closeWeatherDialog}\n        onRetry={retryWeatherFetch}\n      />\n    </div>\n  );\n}\n","export function getItem(key: string): unknown {\n  const item: string | null = localStorage.getItem(key);\n\n  if (typeof item === 'string') {\n    return JSON.parse(item);\n  }\n\n  return undefined;\n}\n\nexport function setItem(key: string, value: unknown): void {\n  localStorage.setItem(key, JSON.stringify(value));\n}\n","import { Dispatch, useCallback, useState } from 'react';\n\nexport default function useMergeState<T>(\n  initialState: T\n): [T, Dispatch<Partial<T>>] {\n  const [state, setState] = useState<T>(initialState);\n  const setMergeState: Dispatch<Partial<T>> = useCallback(\n    (value: Partial<T>) => {\n      setState((previousState: T) => ({ ...previousState, ...value }));\n    },\n    []\n  );\n\n  return [state, setMergeState];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { WeatherContextProvider } from './contexts/WeatherContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherContextProvider>\n      <App />\n    </WeatherContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
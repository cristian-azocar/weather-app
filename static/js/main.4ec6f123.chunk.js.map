{"version":3,"sources":["components/Map/styles.ts","components/Map/Map.tsx","components/WeatherDialog/styles.ts","components/WeatherDialog/WeatherDialog.tsx","components/WelcomeDialog/styles.ts","components/WelcomeDialog/WelcomeDialog.tsx","App.tsx","hooks/useLocalStorage/useLocalStorage.tsx","index.tsx","hooks/useWeather/useWeather.tsx","hooks/useWeather/index.ts"],"names":["makeStyles","mapContainer","width","height","defaultProps","center","onClick","undefined","MapConsumer","props","useMapEvents","click","e","latlng","lat","lng","latitude","longitude","Map","classes","useStyles","MapContainer","id","zoom","className","TileLayer","attribution","url","theme","dialogTitle","padding","spacing","dialogPaper","minHeight","dialogContent","display","alignItems","justifyContent","closeButton","position","right","top","grid","textAlign","errorIcon","fontSize","WeatherDialog","open","isLoading","weather","isError","onClose","onRetry","Dialog","maxWidth","fullWidth","paper","DialogTitle","disableTypography","Typography","variant","IconButton","aria-label","DialogContent","CircularProgress","size","role","aria-busy","Grid","container","direction","item","color","Button","current","temp","alt","src","icon","description","breakpoints","only","margin","maxHeight","borderRadius","dialogActions","gridContainer","flexDirection","gridItem","flexGrow","WelcomeDialog","Box","align","fontWeight","marginBottom","marginTop","symbol","label","Link","href","target","rel","underline","DialogActions","App","useState","openWeatherDialog","setOpenWeatherDialog","selectedCoordinates","setSelectedCoordinates","key","initialValue","localStorage","getItem","JSON","parse","storedValue","setStoredValue","storedValueReference","useRef","useCallback","value","valueToStore","setItem","stringify","useLocalStorage","showWelcomeDialog","setShowWelcomeDialog","useWeather","data","refetch","data-testid","coordinates","Error","queryClient","QueryClient","defaultOptions","queries","refetchOnMount","refetchOnWindowFocus","refetchOnReconnect","retry","staleTime","ReactDOM","render","StrictMode","client","document","getElementById","baseUrl","process","a","axios","get","queryKey","useQuery","fetchWeather","enabled","Boolean"],"mappings":"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","file":"static/js/main.4ec6f123.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles(() => ({\n  mapContainer: {\n    width: '100%',\n    height: '100vh',\n  },\n}));\n","import { LeafletMouseEvent } from 'leaflet';\nimport { MapContainer, TileLayer, useMapEvents } from 'react-leaflet';\nimport useStyles from './styles';\n\ntype MapProps = {\n  center?: CoordinatesTuple;\n  onClick?: (coordinates: Coordinates) => void;\n};\n\nexport type Coordinates = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type CoordinatesTuple = [number, number];\n\nconst defaultProps: MapProps = {\n  center: [-33.448, -70.669],\n  onClick: undefined,\n};\n\nfunction MapConsumer(props: MapProps): null {\n  const { onClick } = props;\n\n  useMapEvents({\n    click: (e: LeafletMouseEvent): void => {\n      const { lat, lng } = e.latlng;\n      const coordinates: Coordinates = { latitude: lat, longitude: lng };\n      onClick?.(coordinates);\n    },\n  });\n\n  return null;\n}\n\nfunction Map(props: MapProps): JSX.Element {\n  const { center, onClick } = props;\n  const classes = useStyles();\n\n  return (\n    <MapContainer\n      id=\"map\"\n      center={center}\n      zoom={4}\n      className={classes.mapContainer}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      <MapConsumer onClick={onClick} />\n    </MapContainer>\n  );\n}\n\nMap.defaultProps = defaultProps;\n\nexport default Map;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  dialogTitle: {\n    padding: theme.spacing(2),\n  },\n  dialogPaper: {\n    minHeight: 290,\n  },\n  dialogContent: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n  },\n  grid: {\n    textAlign: 'center',\n  },\n  errorIcon: {\n    fontSize: 80,\n  },\n}));\n","import Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorOutline from '@material-ui/icons/ErrorOutline';\nimport { Weather } from '../../hooks/useWeather';\nimport useStyles from './styles';\n\ntype WeatherDialogProps = {\n  open: boolean;\n  weather?: Weather;\n  isLoading?: boolean;\n  isError?: boolean;\n  onClose?: () => void;\n  onRetry?: () => void;\n};\n\nfunction WeatherDialog(props: WeatherDialogProps): JSX.Element {\n  const { open, isLoading, weather, isError, onClose, onRetry } = props;\n  const classes = useStyles();\n\n  function renderContent(): JSX.Element {\n    if (isLoading) {\n      return <CircularProgress size={80} role=\"progressbar\" aria-busy=\"true\" />;\n    }\n\n    if (isError) {\n      return (\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n          <Grid item>\n            <ErrorOutline color=\"error\" className={classes.errorIcon} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" role=\"alert\">\n              Oops! Something went wrong\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={onRetry}>\n              Retry\n            </Button>\n          </Grid>\n        </Grid>\n      );\n    }\n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        <Grid item>\n          <Typography variant=\"h4\">{weather?.current.temp}&deg;</Typography>\n        </Grid>\n        <Grid item>\n          <img\n            alt=\"icon\"\n            src={`https://openweathermap.org/img/wn/${weather?.current.weather[0].icon}@2x.png`}\n            width={100}\n            height={100}\n          />\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h5\">\n            {weather?.current.weather[0].description}\n          </Typography>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"xs\"\n      fullWidth\n      classes={{ paper: classes.dialogPaper }}\n    >\n      <DialogTitle disableTypography className={classes.dialogTitle}>\n        <Typography variant=\"h6\">Current Weather</Typography>\n        <IconButton\n          className={classes.closeButton}\n          onClick={onClose}\n          aria-label=\"close\"\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        {renderContent()}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nWeatherDialog.defaultProps = {\n  weather: undefined,\n  isLoading: false,\n  isError: undefined,\n  onClose: undefined,\n  onRetry: undefined,\n};\n\nexport default WeatherDialog;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  dialogPaper: {\n    [theme.breakpoints.only('xs')]: {\n      width: '100%',\n      height: '100%',\n      margin: '0px',\n      maxWidth: '100%',\n      maxHeight: 'none',\n      borderRadius: '0px',\n    },\n  },\n  dialogActions: {\n    justifyContent: 'center',\n  },\n  gridContainer: {\n    height: '100%',\n    alignItems: 'center',\n    flexDirection: 'column',\n    [theme.breakpoints.only('xs')]: {\n      flexDirection: 'row',\n    },\n  },\n  gridItem: {\n    flexGrow: 1,\n  },\n}));\n","import Emoji from 'a11y-react-emoji';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport useStyles from './styles';\n\ntype WelcomeDialogProps = {\n  open: boolean;\n  onClose?: () => void;\n};\n\nfunction WelcomeDialog(props: WelcomeDialogProps): JSX.Element {\n  const { open, onClose } = props;\n  const classes = useStyles();\n\n  return (\n    <Dialog open={open} classes={{ paper: classes.dialogPaper }}>\n      <DialogContent>\n        <Grid container className={classes.gridContainer}>\n          <Grid item className={classes.gridItem}>\n            <Box textAlign=\"center\">\n              <img\n                src=\"/weather-app/static/images/welcome-image.png\"\n                alt=\"welcome\"\n              />\n            </Box>\n          </Grid>\n          <Grid item className={classes.gridItem}>\n            <Typography variant=\"h5\" align=\"center\">\n              <Box fontWeight=\"bold\" marginBottom=\"20px\" marginTop=\"20px\">\n                Welcome to Weather App! <Emoji symbol=\"👋\" label=\"wave-hand\" />\n              </Box>\n            </Typography>\n          </Grid>\n          <Grid item className={classes.gridItem}>\n            <Typography align=\"center\">\n              Hello there! My name is{' '}\n              <Link\n                href=\"https://github.com/cristian-azocar\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                underline=\"always\"\n              >\n                Cristian Azócar\n              </Link>{' '}\n              and I made this simple web application for fun. Just select a\n              place on the map and see the current temperature. If you want to\n              know more, visit the{' '}\n              <Link\n                href=\"https://github.com/cristian-azocar/weather-app\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                underline=\"always\"\n              >\n                repository.\n              </Link>\n            </Typography>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions className={classes.dialogActions}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\n          OK, got it!\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nWelcomeDialog.defaultProps = {\n  onClose: undefined,\n};\n\nexport default WelcomeDialog;\n","import { useState } from 'react';\nimport Map, { Coordinates } from './components/Map';\nimport WeatherDialog from './components/WeatherDialog';\nimport WelcomeDialog from './components/WelcomeDialog';\nimport useWeather from './hooks/useWeather';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nexport default function App(): JSX.Element {\n  const [openWeatherDialog, setOpenWeatherDialog] = useState(false);\n  const [selectedCoordinates, setSelectedCoordinates] = useState<Coordinates>();\n  const [showWelcomeDialog, setShowWelcomeDialog] = useLocalStorage(\n    'showWelcomeDialog',\n    true\n  );\n  const { data, isLoading, isError, refetch } = useWeather(selectedCoordinates);\n\n  function handleMapClick(coordinates: Coordinates): void {\n    setSelectedCoordinates(coordinates);\n    setOpenWeatherDialog(true);\n  }\n\n  function retryWeatherFetch(): void {\n    if (!selectedCoordinates) {\n      throw new Error('No coordinates have been selected yet');\n    }\n\n    refetch();\n  }\n\n  function closeWeatherDialog(): void {\n    setOpenWeatherDialog(false);\n  }\n\n  function closeWelcomeDialog(): void {\n    setShowWelcomeDialog(false);\n  }\n\n  return (\n    <div id=\"app\" data-testid=\"app\">\n      <WelcomeDialog open={showWelcomeDialog} onClose={closeWelcomeDialog} />\n      <Map onClick={handleMapClick} />\n      <WeatherDialog\n        open={openWeatherDialog}\n        weather={data}\n        isLoading={isLoading}\n        isError={isError}\n        onClose={closeWeatherDialog}\n        onRetry={retryWeatherFetch}\n      />\n    </div>\n  );\n}\n","import { useCallback, useRef, useState } from 'react';\n\nexport default function useLocalStorage<T>(\n  key: string,\n  initialValue?: T\n): [T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const storedValueReference = useRef(storedValue);\n  storedValueReference.current = storedValue;\n\n  const setValue = useCallback(\n    (value: T) => {\n      const valueToStore =\n        typeof value === 'function'\n          ? value(storedValueReference.current)\n          : value;\n      localStorage.setItem(key, JSON.stringify(valueToStore));\n      setStoredValue(valueToStore);\n    },\n    [key]\n  );\n\n  return [storedValue, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport App from './App';\nimport './index.css';\n\nconst twentyFourHoursInMs = 1000 * 60 * 60 * 24;\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      retry: false,\n      staleTime: twentyFourHoursInMs,\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import axios from 'axios';\nimport { useQuery, UseQueryResult } from 'react-query';\nimport { Coordinates } from '../../components/Map';\nimport { Weather } from './Weather';\n\nconst baseUrl = process.env.REACT_APP_API_BASE_URL || '';\n\nasync function fetchWeather(\n  coordinates: Coordinates | undefined\n): Promise<Weather> {\n  if (coordinates === undefined) {\n    throw new Error('Coordinates object is undefined');\n  }\n\n  const { latitude, longitude } = coordinates;\n  const url = `${baseUrl}/api/weather?latitude=${latitude}&longitude=${longitude}`;\n  const { data } = await axios.get<Weather>(url);\n\n  return data;\n}\n\nexport default function useWeather(\n  coordinates: Coordinates | undefined\n): UseQueryResult<Weather> {\n  const queryKey = ['weather', coordinates];\n  return useQuery(queryKey, () => fetchWeather(coordinates), {\n    enabled: Boolean(coordinates),\n  });\n}\n","export { default } from './useWeather';\nexport * from './Weather';\n"],"sourceRoot":""}